const ethers = require("ethers") //1 导入ethers
const fs = require("fs-extra") //4 导入 读取文件的包 yarn add fs-extra
require("dotenv").config() //12  加载到环境变量中 然后在js里面通过process.env.xx来访问
//例子 async
async function start() {
  await cookPopcorn()
  await pourDrinks()
  startMovie() //我们希望等到上述两个完成才执行下一步，所以叫wait。上面两个是异步的。
}

async function main() {
  //2 本地ganache 作为区块链提供节点，从而连接到区块链
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL)
  //3 提供自己的私钥 来作为签名的账户
  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider)
  /*
    13 从加密json生成wallt 并连接到provider
    const encryptJson = await fs.readFileSync("./.encryptKey.json", "utf8");
    const wallet = ethers.Wallet.fromEncryptedJsonSync(
      encryptJson,
      "my password"
    );
    wallet.connect("http://0.0.0.0:8545");
  */

  // 5读取abi 和 字节码 用于编译
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8")
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  )
  //6 创建一个用合约工厂用于部署合约
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet)
  //7 部署合约
  const contract = await contractFactory.deploy() //stop here wait for contarct to deploy
  // const contract = await contractFactory.deploy({gasLimit:100000000}); 加一些部署的条件 比如gas limit等
  console.log(contract.address)
  await contract.deployTransaction.wait(1)
  console.log(contract.address)
  /*
    8 可选项 ，等1个区块确认之后才会得到交易回执receopent，不等待则直接得到交易的普通信息
      const delpoymentReceipent = await contract.deployTransaction.wait(1);
      console.log("here is the deployment transaction (transaction response): ",contract.deployTransaction);
      console.log("here is  the transaction Receipent :", delpoymentReceipent);
  */
  /*
 9. 原始交易过程
  const nonce =await wallet.getTransactionCount();
  const tx = {
    nonce: 5,
    //这里的nonce是交易的nonce ，每个用户的 交易要有独一无二的nonce ，交易里面的nonce代表你发起的第5个交易,如果你交易数量不对 会出错，比如你只发了四个交易之前，结果你发第6个 就会被抛弃掉
    gasPrice: 100000000000,
    gasLimit: 1000000,
    to: null,
    value: 0,
    data: "0x608060405234801561001057600080fd5b50610771806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780636057361d1461007a5780636f760f41146100965780638bab8dd5146100b25780639e7a13ad146100e2575b600080fd5b610064610113565b604051610071919061052a565b60405180910390f35b610094600480360381019061008f919061046d565b61011c565b005b6100b060048036038101906100ab9190610411565b610126565b005b6100cc60048036038101906100c791906103c8565b6101b6565b6040516100d9919061052a565b60405180910390f35b6100fc60048036038101906100f7919061046d565b6101e4565b60405161010a929190610545565b60405180910390f35b60008054905090565b8060008190555050565b6001604051806040016040528083815260200184815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101908051906020019061018c9291906102a0565b505050806002836040516101a09190610513565b9081526020016040518091039020819055505050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b600181815481106101f457600080fd5b906000526020600020906002020160009150905080600001549080600101805461021d9061063e565b80601f01602080910402602001604051908101604052809291908181526020018280546102499061063e565b80156102965780601f1061026b57610100808354040283529160200191610296565b820191906000526020600020905b81548152906001019060200180831161027957829003601f168201915b5050505050905082565b8280546102ac9061063e565b90600052602060002090601f0160209004810192826102ce5760008555610315565b82601f106102e757805160ff1916838001178555610315565b82800160010185558215610315579182015b828111156103145782518255916020019190600101906102f9565b5b5090506103229190610326565b5090565b5b8082111561033f576000816000905550600101610327565b5090565b60006103566103518461059a565b610575565b90508281526020810184848401111561037257610371610704565b5b61037d8482856105fc565b509392505050565b600082601f83011261039a576103996106ff565b5b81356103aa848260208601610343565b91505092915050565b6000813590506103c281610724565b92915050565b6000602082840312156103de576103dd61070e565b5b600082013567ffffffffffffffff8111156103fc576103fb610709565b5b61040884828501610385565b91505092915050565b600080604083850312156104285761042761070e565b5b600083013567ffffffffffffffff81111561044657610445610709565b5b61045285828601610385565b9250506020610463858286016103b3565b9150509250929050565b6000602082840312156104835761048261070e565b5b6000610491848285016103b3565b91505092915050565b60006104a5826105cb565b6104af81856105d6565b93506104bf81856020860161060b565b6104c881610713565b840191505092915050565b60006104de826105cb565b6104e881856105e7565b93506104f881856020860161060b565b80840191505092915050565b61050d816105f2565b82525050565b600061051f82846104d3565b915081905092915050565b600060208201905061053f6000830184610504565b92915050565b600060408201905061055a6000830185610504565b818103602083015261056c818461049a565b90509392505050565b600061057f610590565b905061058b8282610670565b919050565b6000604051905090565b600067ffffffffffffffff8211156105b5576105b46106d0565b5b6105be82610713565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561062957808201518184015260208101905061060e565b83811115610638576000848401525b50505050565b6000600282049050600182168061065657607f821691505b6020821081141561066a576106696106a1565b5b50919050565b61067982610713565b810181811067ffffffffffffffff82111715610698576106976106d0565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61072d816105f2565b811461073857600080fd5b5056fea264697066735822122005f4761e428b272cff3be71d18d77c255fd57b725a8cec4f019c4e1beb4ada8164736f6c63430008070033",
    chainId: 1337,
    // Additionally, there is a v,r,and s variable that ethers handles for us.
    // This is the signature of the transaction.
    // There is a lot of math going on with those values, but that's how it's gaurenteed that the transaction is signed!
    // https://ethereum.stackexchange.com/questions/15766/what-does-v-r-s-in-eth-gettransactionbyhash-mean
  };
  //用钱包签名 ,但是没发送
  const signedTxResponse =await wallet.signTransaction(tx); 
  //签名并发送
  const sentTxResponse =await wallet.sendTransaction(tx);
*/
  //10 调用函数 就是你自己实现的solidity
  const res = await contract.retrieve()
  console.log(res) //输出的是bigNumber类型的，因为数字都很大，js处理不了，所以用的是etherjs的bigNumber
  console.log(res.toString())
  console.log(`the current num is ${res.toString()}`)
  //11 输出一些数据
  let currentFavoriteNumber = await contract.retrieve()
  console.log(`Current Favorite Number: ${currentFavoriteNumber}`)
  console.log("Updating favorite number...")
  let transactionResponse = await contract.store(7) //这里输入字符串也是可以的，因为js处理不了很大的数字，因为etherjs足够聪明去识别
  let transactionReceipt = await transactionResponse.wait(1)
  currentFavoriteNumber = await contract.retrieve()
  console.log(`New Favorite Number: ${currentFavoriteNumber}`)
}
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error)
    process.exit(1)
  })
