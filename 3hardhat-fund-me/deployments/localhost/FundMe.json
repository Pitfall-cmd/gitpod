{
  "address": "0x71C95911E9a5D330f4D621842EC243EE1343292e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "a",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tmpa",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf3a4109b94ab26f3eb24ca3fc68faabff093b88350993f545dbee3736f7a3169",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x71C95911E9a5D330f4D621842EC243EE1343292e",
    "transactionIndex": 0,
    "gasUsed": "1077909",
    "logsBloom": "0x
    "blockHash": "0xece39d20acf9efa7c7b3f3995d9fec3178ee39d3e4a9690020ec6866d6176393",
    "transactionHash": "0xf3a4109b94ab26f3eb24ca3fc68faabff093b88350993f545dbee3736f7a3169",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1077909",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8464135c8F25Da09e49BC8782676a84730C318bC"
  ],
  "numDeployments": 1,
  "solcInputHash": "638e00276ccb696e93a4b1fa642ae61a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"a\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tmpa\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ybl\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund(uint256)\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.7;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author ybl\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    uint public a;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund(uint tmpa) public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n        a=tmpa;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x1ca8f0ede97e784cd1eb56da3aae1b6c32b721c771dea5350fc21f998bdc2f01\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  // call it get fiatConversionRate, since it assumes something about decimals\\n  // It wouldn't work for every aggregator\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\",\"keccak256\":\"0x0ef9b5199cc0e9d5fca1aff75ca10a52033d784f24b3a6f6ab9e916b71d920b4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620013ad380380620013ad8339818101604052810190620000379190620000cd565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c6112206200018d60003960008181610329015281816104bd01528181610563015281816105b301526107aa01526112206000f3fe6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461016b5780639e87a5cd14610196578063be2693f0146101c1578063ca1d209d146101d8578063d7b4750c146101f457610091565b80630343fb25146100965780630d8e6e2c146100d35780630dbe671f146100fe5780633ccfd60b146101295780636b69a59214610140575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610bb7565b610231565b6040516100ca9190610d97565b60405180910390f35b3480156100df57600080fd5b506100e861027a565b6040516100f59190610d97565b60405180910390f35b34801561010a57600080fd5b50610113610321565b6040516101209190610d97565b60405180910390f35b34801561013557600080fd5b5061013e610327565b005b34801561014c57600080fd5b50610155610552565b6040516101629190610d97565b60405180910390f35b34801561017757600080fd5b5061018061055f565b60405161018d9190610d41565b60405180910390f35b3480156101a257600080fd5b506101ab610587565b6040516101b89190610d5c565b60405180910390f35b3480156101cd57600080fd5b506101d66105b1565b005b6101f260048036038101906101ed9190610be4565b610840565b005b34801561020057600080fd5b5061021b60048036038101906102169190610be4565b610983565b6040516102289190610d41565b60405180910390f35b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e457600080fd5b505afa1580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c9190610c11565b905090565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ac576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610458576000600182815481106103d2576103d16110ff565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045090611058565b9150506103af565b50600067ffffffffffffffff8111156104745761047361112e565b5b6040519080825280602002602001820160405280156104a25781602001602082028036833780820191505090505b50600190805190602001906104b8929190610aa7565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104ff90610d2c565b60006040518083038185875af1925050503d806000811461053c576040519150601f19603f3d011682016040523d82523d6000602084013e610541565b606091505b505090508061054f57600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610636576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106ba57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610670575b5050505050905060005b81518110156107455760008282815181106106e2576106e16110ff565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061073d90611058565b9150506106c4565b50600067ffffffffffffffff8111156107615761076061112e565b5b60405190808252806020026020018201604052801561078f5781602001602082028036833780820191505090505b50600190805190602001906107a5929190610aa7565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107ec90610d2c565b60006040518083038185875af1925050503d8060008114610829576040519150601f19603f3d011682016040523d82523d6000602084013e61082e565b606091505b505090508061083c57600080fd5b5050565b6802b5e3af16b188000061087f600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109cb90919063ffffffff16565b10156108c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b790610d77565b60405180910390fd5b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461090f9190610dce565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060008190555050565b600060018281548110610999576109986110ff565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109d783610a07565b90506000670de0b6b3a764000085836109f09190610f6c565b6109fa9190610e24565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a5057600080fd5b505afa158015610a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a889190610c3e565b5050509150506402540be40081610a9f9190610e55565b915050919050565b828054828255906000526020600020908101928215610b20579160200282015b82811115610b1f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ac7565b5b509050610b2d9190610b31565b5090565b5b80821115610b4a576000816000905550600101610b32565b5090565b600081359050610b5d8161118e565b92915050565b600081519050610b72816111a5565b92915050565b600081359050610b87816111bc565b92915050565b600081519050610b9c816111bc565b92915050565b600081519050610bb1816111d3565b92915050565b600060208284031215610bcd57610bcc61115d565b5b6000610bdb84828501610b4e565b91505092915050565b600060208284031215610bfa57610bf961115d565b5b6000610c0884828501610b78565b91505092915050565b600060208284031215610c2757610c2661115d565b5b6000610c3584828501610b8d565b91505092915050565b600080600080600060a08688031215610c5a57610c5961115d565b5b6000610c6888828901610ba2565b9550506020610c7988828901610b63565b9450506040610c8a88828901610b8d565b9350506060610c9b88828901610b8d565b9250506080610cac88828901610ba2565b9150509295509295909350565b610cc281610fc6565b82525050565b610cd181611022565b82525050565b6000610ce4601b83610dbd565b9150610cef82611162565b602082019050919050565b6000610d07600083610db2565b9150610d128261118b565b600082019050919050565b610d2681611002565b82525050565b6000610d3782610cfa565b9150819050919050565b6000602082019050610d566000830184610cb9565b92915050565b6000602082019050610d716000830184610cc8565b92915050565b60006020820190508181036000830152610d9081610cd7565b9050919050565b6000602082019050610dac6000830184610d1d565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610dd982611002565b9150610de483611002565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e1957610e186110a1565b5b828201905092915050565b6000610e2f82611002565b9150610e3a83611002565b925082610e4a57610e496110d0565b5b828204905092915050565b6000610e6082610fd8565b9150610e6b83610fd8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610eaa57610ea96110a1565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610ee757610ee66110a1565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f2457610f236110a1565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f6157610f606110a1565b5b828202905092915050565b6000610f7782611002565b9150610f8283611002565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fbb57610fba6110a1565b5b828202905092915050565b6000610fd182610fe2565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b600061102d82611034565b9050919050565b600061103f82611046565b9050919050565b600061105182610fe2565b9050919050565b600061106382611002565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611096576110956110a1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61119781610fc6565b81146111a257600080fd5b50565b6111ae81610fd8565b81146111b957600080fd5b50565b6111c581611002565b81146111d057600080fd5b50565b6111dc8161100c565b81146111e757600080fd5b5056fea2646970667358221220b679e4e28eaaae301d728e287c4327cbc090680901dcd807b3422655d2cc5a3264736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461016b5780639e87a5cd14610196578063be2693f0146101c1578063ca1d209d146101d8578063d7b4750c146101f457610091565b80630343fb25146100965780630d8e6e2c146100d35780630dbe671f146100fe5780633ccfd60b146101295780636b69a59214610140575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610bb7565b610231565b6040516100ca9190610d97565b60405180910390f35b3480156100df57600080fd5b506100e861027a565b6040516100f59190610d97565b60405180910390f35b34801561010a57600080fd5b50610113610321565b6040516101209190610d97565b60405180910390f35b34801561013557600080fd5b5061013e610327565b005b34801561014c57600080fd5b50610155610552565b6040516101629190610d97565b60405180910390f35b34801561017757600080fd5b5061018061055f565b60405161018d9190610d41565b60405180910390f35b3480156101a257600080fd5b506101ab610587565b6040516101b89190610d5c565b60405180910390f35b3480156101cd57600080fd5b506101d66105b1565b005b6101f260048036038101906101ed9190610be4565b610840565b005b34801561020057600080fd5b5061021b60048036038101906102169190610be4565b610983565b6040516102289190610d41565b60405180910390f35b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e457600080fd5b505afa1580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c9190610c11565b905090565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ac576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610458576000600182815481106103d2576103d16110ff565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045090611058565b9150506103af565b50600067ffffffffffffffff8111156104745761047361112e565b5b6040519080825280602002602001820160405280156104a25781602001602082028036833780820191505090505b50600190805190602001906104b8929190610aa7565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104ff90610d2c565b60006040518083038185875af1925050503d806000811461053c576040519150601f19603f3d011682016040523d82523d6000602084013e610541565b606091505b505090508061054f57600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610636576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106ba57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610670575b5050505050905060005b81518110156107455760008282815181106106e2576106e16110ff565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061073d90611058565b9150506106c4565b50600067ffffffffffffffff8111156107615761076061112e565b5b60405190808252806020026020018201604052801561078f5781602001602082028036833780820191505090505b50600190805190602001906107a5929190610aa7565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107ec90610d2c565b60006040518083038185875af1925050503d8060008114610829576040519150601f19603f3d011682016040523d82523d6000602084013e61082e565b606091505b505090508061083c57600080fd5b5050565b6802b5e3af16b188000061087f600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109cb90919063ffffffff16565b10156108c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b790610d77565b60405180910390fd5b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461090f9190610dce565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060008190555050565b600060018281548110610999576109986110ff565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109d783610a07565b90506000670de0b6b3a764000085836109f09190610f6c565b6109fa9190610e24565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a5057600080fd5b505afa158015610a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a889190610c3e565b5050509150506402540be40081610a9f9190610e55565b915050919050565b828054828255906000526020600020908101928215610b20579160200282015b82811115610b1f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ac7565b5b509050610b2d9190610b31565b5090565b5b80821115610b4a576000816000905550600101610b32565b5090565b600081359050610b5d8161118e565b92915050565b600081519050610b72816111a5565b92915050565b600081359050610b87816111bc565b92915050565b600081519050610b9c816111bc565b92915050565b600081519050610bb1816111d3565b92915050565b600060208284031215610bcd57610bcc61115d565b5b6000610bdb84828501610b4e565b91505092915050565b600060208284031215610bfa57610bf961115d565b5b6000610c0884828501610b78565b91505092915050565b600060208284031215610c2757610c2661115d565b5b6000610c3584828501610b8d565b91505092915050565b600080600080600060a08688031215610c5a57610c5961115d565b5b6000610c6888828901610ba2565b9550506020610c7988828901610b63565b9450506040610c8a88828901610b8d565b9350506060610c9b88828901610b8d565b9250506080610cac88828901610ba2565b9150509295509295909350565b610cc281610fc6565b82525050565b610cd181611022565b82525050565b6000610ce4601b83610dbd565b9150610cef82611162565b602082019050919050565b6000610d07600083610db2565b9150610d128261118b565b600082019050919050565b610d2681611002565b82525050565b6000610d3782610cfa565b9150819050919050565b6000602082019050610d566000830184610cb9565b92915050565b6000602082019050610d716000830184610cc8565b92915050565b60006020820190508181036000830152610d9081610cd7565b9050919050565b6000602082019050610dac6000830184610d1d565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610dd982611002565b9150610de483611002565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e1957610e186110a1565b5b828201905092915050565b6000610e2f82611002565b9150610e3a83611002565b925082610e4a57610e496110d0565b5b828204905092915050565b6000610e6082610fd8565b9150610e6b83610fd8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610eaa57610ea96110a1565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610ee757610ee66110a1565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f2457610f236110a1565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f6157610f606110a1565b5b828202905092915050565b6000610f7782611002565b9150610f8283611002565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fbb57610fba6110a1565b5b828202905092915050565b6000610fd182610fe2565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b600061102d82611034565b9050919050565b600061103f82611046565b9050919050565b600061105182610fe2565b9050919050565b600061106382611002565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611096576110956110a1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61119781610fc6565b81146111a257600080fd5b50565b6111ae81610fd8565b81146111b957600080fd5b50565b6111c581611002565b81146111d057600080fd5b50565b6111dc8161100c565b81146111e757600080fd5b5056fea2646970667358221220b679e4e28eaaae301d728e287c4327cbc090680901dcd807b3422655d2cc5a3264736f6c63430008070033",
  "devdoc": {
    "author": "ybl",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund(uint256)": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "a",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 69,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 76,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}